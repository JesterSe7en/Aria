set(PROJECT_NAME AriaImgui)

# python script manages the file list, cmake will just take files in this directory
file(GLOB Files "*.*")

set(ALL_FILES
    ${Files}
)

################################################################################
# Target
################################################################################
add_library(${PROJECT_NAME} STATIC ${ALL_FILES})

use_props(${PROJECT_NAME} "${CMAKE_CONFIGURATION_TYPES}" "${DEFAULT_CXX_PROPS}")
set(ROOT_NAMESPACE Aria)

set_target_properties(${PROJECT_NAME} PROPERTIES
    VS_GLOBAL_KEYWORD "Win32Proj"
    )
################################################################################
# Target name
################################################################################
set_target_properties(${PROJECT_NAME} PROPERTIES
    TARGET_NAME_DEBUG "imgui"
    TARGET_NAME_DIST "imgui"
    TARGET_NAME_RELEASE "imgui"
    )
################################################################################
# Output directory
################################################################################
set_target_properties(${PROJECT_NAME} PROPERTIES
    OUTPUT_DIRECTORY_DEBUG "${CMAKE_CURRENT_SOURCE_DIR}/../../../bin/Debug-windows-x86_64/Aria/"
    OUTPUT_DIRECTORY_DIST "${CMAKE_CURRENT_SOURCE_DIR}/../../../bin/Dist-windows-x86_64/Aria/"
    OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}/../../../bin/Release-windows-x86_64/Aria/"
    )
################################################################################
# MSVC runtime library
################################################################################
get_property(MSVC_RUNTIME_LIBRARY_DEFAULT TARGET ${PROJECT_NAME} PROPERTY MSVC_RUNTIME_LIBRARY)
string(CONCAT "MSVC_RUNTIME_LIBRARY_STR"
    $<$<CONFIG:Debug>:
    MultiThreadedDebug
    >
    $<$<CONFIG:Dist>:
    MultiThreaded
    >
    $<$<CONFIG:Release>:
    MultiThreaded
    >
    $<$<NOT:$<OR:$<CONFIG:Debug>,$<CONFIG:Dist>,$<CONFIG:Release>>>:${MSVC_RUNTIME_LIBRARY_DEFAULT}>
    )
set_target_properties(${PROJECT_NAME} PROPERTIES MSVC_RUNTIME_LIBRARY ${MSVC_RUNTIME_LIBRARY_STR})
################################################################################
# Include directories
################################################################################
if (DEFINED ENV{VULKAN_SDK})
  target_include_directories(${PROJECT_NAME} PUBLIC "$ENV{VULKAN_SDK}/Include")
else ()
  target_include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/../../../../../ProgramData/scoop/apps/vulkan/current/Include")
endif ()

################################################################################
# Compile definitions
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    target_compile_definitions(${PROJECT_NAME} PRIVATE
        "$<$<CONFIG:Debug>:"
            "_DEBUG"
        ">"
        "$<$<CONFIG:Release>:"
            "NDEBUG"
        ">"
        "IMGUI_IMPL_VULKAN_NO_PROTOTYPES;" ## for vulkan imgui impl-- see imgui_impl_vulkan.h
        "_CONSOLE;"
        "UNICODE;"
        "_UNICODE"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
    target_compile_definitions(${PROJECT_NAME} PRIVATE
        "$<$<CONFIG:Debug>:"
            "_DEBUG"
        ">"
        "$<$<CONFIG:Release>:"
            "NDEBUG"
        ">"
        "IMGUI_IMPL_VULKAN_NO_PROTOTYPES;" ## for vulkan imgui impl-- see imgui_impl_vulkan.h
        "WIN32;"
        "_CONSOLE;"
        "UNICODE;"
        "_UNICODE"
    )
endif()

################################################################################
# Compile and link options
################################################################################
if (MSVC)
  target_compile_options(${PROJECT_NAME} PRIVATE
      $<$<CONFIG:Debug>:
      /Od;
      /ZI
      >
      $<$<CONFIG:Dist>:
      /Gm-;
      /Ox;
      /Oi;
      /GF;
      /Gy;
      ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT}
      >
      $<$<CONFIG:Release>:
      /Gm-;
      /Ox;
      /Oi;
      /GF;
      /Gy;
      ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT}
      >
      /std:c++17;
      /W4;
      ${DEFAULT_CXX_EXCEPTION_HANDLING}
      )
  target_link_options(${PROJECT_NAME} PRIVATE
      $<$<CONFIG:Dist>:
      /OPT:REF;
      /OPT:ICF
      >
      $<$<CONFIG:Release>:
      /OPT:REF;
      /OPT:ICF
      >
      /SUBSYSTEM:WINDOWS
      )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  target_compile_options(${PROJECT_NAME} PRIVATE
      $<$<CONFIG:Debug>:
      -g
      -O0
      ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT}
      >

      $<$<CONFIG:Dist>:
      -O2
      -ffunction-sections
      -fdata-sections
      ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT}
      >

      $<$<CONFIG:Release>:
      -O2
      -ffunction-sections
      -fdata-sections
      ${DEFAULT_CXX_EXCEPTION_HANDLING}
      >

      -Wall
      -Wextra
      -Wpedantic
      -std=c++17
      )
  target_link_options(${PROJECT_NAME} PRIVATE
      $<$<CONFIG:Release>:
      -flto
      -Wl,--gc-sections
      -Wl,--icf=safe
      -Wl,--strip-all
      -Wl,--plugin-opt=eliminate-unused-dwarf-types
      >
      $<$<CONFIG:Dist>:
      -flto
      -Wl,--gc-sections
      -Wl,--icf=safe
      -Wl,--strip-all
      >
      )
endif ()

################################################################################
# Dependencies
################################################################################
# Link with other targets.
target_link_libraries(${PROJECT_NAME} PUBLIC
    glfw
    )

find_package(glfw3 CONFIG REQUIRED)